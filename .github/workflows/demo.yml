name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cach dependencies # debe ser antes de instalar las dependencias
        uses: actions/cache@v4
        with:
          path: ~/.npm  # path of folder that must be cached
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      # {{steps.<id of publish>.outputs.<variable}}
      script-file: ${{ steps.publish.outputs.script-file}}  # para poder referenciar en sigte Job
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies # debe ser antes de instalar las dependencias
        uses: actions/cache@v4
        with:
          path: ~/.npm  # path of folder that must be cached
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish # Here the name of file name stored in variable 'script-file' to pÃ¡ss to Build job
        # $ find dist/assets/*.js -type f -execdir echo 'script-file={}' ';'
        # script-file=./index.047b9b6b.js
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files # nombre a dar al artefacto
          #path: dist
          path: |  # pipe para indicar varias lineas
            dist
            package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v4  # recupera los artefactos
        with:
          name: dist-files
      - name: Output contents of disp file
        run: ls -al
      - name: Output filename  # we show the name of the variable that was passwd before
          # Using the "needs" object that contains outputs the "<job name> then the "output" then name of variable: "script-file"
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
